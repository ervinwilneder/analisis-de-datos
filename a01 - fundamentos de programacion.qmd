# Fundamentos de programación

## Lectura

- [Python for Everybody (Cap. 3 a 11 y 15)](https://www.py4e.com/lessons)
- [Python Tutorial (_w3schools_)](https://www.w3schools.com/python/)
- [Python Built-in Methods (_Efficient Python Tricks and Tools for Data Scientists: Cap. 2_)](https://khuyentran1401.github.io/Efficient_Python_tricks_and_tools_for_data_scientists/README.html)

## Actividades

- Realice en Python (o en el lenguaje que usted prefiera) el siguiente listado de ejercicios, poniendo en práctica el uso de estructuras básicas de datos, operaciones y funciones:
    - Dada una lista de números y un número cualquiera, escriba un función que permita identificar dentro de la lista 2 elementos cuya suma sea dicho número.
    - Dado un número, escriba una función que permita identificar si el mismo es palíndromo (un número que se lee igual al derecho o al revés).
    - Escriba una función que permita convertir un número romano a números decimales (los números que usamos habitualmente).
    - Dada una oración (compuesta de palabras y espacios), escriba una función que permita obtener el largo (cantidad de caracteres) de la última palabra.
    - Escriba una función para obtener la moda de una lista de números. Debe devolver como resultado una tupla con el número y su frecuencia.
    - Escriba una función que devuelva True o False si un texto (un string) presenta palabras repetidas.
    - Implemente una clase llamada `Notebook` con un método denominado `write()` que permita almacenar notas (un string cualquiera) con su correspondiente título y otro método `list()` que devuelva el listado completo de notas almacenadas. Considere la estructura de datos más adecuada según su criterio.

## Resumen

Hay conceptos que son comunes a toda la programación. Por tanto, independientemente de que uno utilice Python, R, Julia, Javascript, SQL, etc. siempre encontrará la forma de desarrollar aquello que necesita recurriendo al reconocimiento y uso de diferentes **tipos y estructuras de datos/variables**, **operadores y estructuras de control/flujo** y **funciones/procedimientos**. Desde ya, en cada lenguaje habrá variaciones que tendrán que ser asimiladas oportunamente, pero la esencia estará en la funcionalidad de cada uno de los elementos recién mencionados.

Es así que, primeramente, se tienen los datos y/o variables. Cabe repasar la sección de _Datos, unidades y variables de análisis_, ya que de nuevo se presenta al dato como la mínima unidad con la que se trabaja. **Los datos, que pueden ser de uno u otro tipo, son almacenados en variables y esas variables pueden tener estructuras diversas**, según sea la lógica de almacenamiento de la información. Por ejemplo, una estructura muy básica es una **tabla o matriz**, un arreglo de elementos en 2 dimensiones (horizontal y vertical), las cuales se ha señalado anteriormente que pueden utilizarse como medio para presentar agregaciones de datos (ver _Tablas de frecuencias_). Desde ya, los datos pueden traer consigo relaciones cuan complejas son en el mundo real, con lo cual existen estructuras de datos (o combinaciones de éstas) tales que puedan representar dicha complejidad. En python, se tienen **listas, tuplas, arrays, diccionarios, dataframes y muchas más**, habitualmente utilizados para el análisis de datos. En R y demás lenguajes pueden o no recibir el mismo nombre, así como también pueden variar las operaciones que se permiten realizar sobre las mismas.

**Las operaciones son la manera de relacionar elementos**. En la práctica, se puede comenzar con el paralelismo con las operaciones matemáticas (suma, resta, multiplicación, etc.), lo cual es correcto, dado que están presentes en casi cualquier proceso de análisis. Un nivel por debajo de eso, existen las operaciones _booleanas_, que son la base de toda la programación. Se tratan de operaciones con unos y ceros, simples en naturaleza, pero igualmente muy presentes en el trabajo habitual con datos, ya que permiten la **comparación y condicionamiento de elementos y procesos**, a través de estructuras previamente pensadas para ello.

Toda operación con datos, variables y/o estructuras de datos posiblemente deba ser reutilizada (en el lenguaje que sea), por lo tanto entra en juego lo que se denominan (casi universalmente) como funciones. **Las funciones son bloques de operaciones** que, habitualmente, tienen datos como entrada y salida, con alguna transformación de por medio. Cabe señalar que puede no ser así, pero que al menos un cambio (en el ámbito del código o entorno de trabajo) realizan. El conjunto de funciones suele recibir el nombre de _librería_ (o módulo), que serán de vital importante, dado que es prácticamente imposible construir algo desde cero. De ahí la importancia de la reutilización (y de los conceptos de transparencia, replicabilidad, interoperabilidad y escalabilidad mencionados en _Entorno de trabajo_).

A todo lo anterior corresponde agregarle una cuestión relacionada a los **patrones de diseño en programación**, esto es, a la forma en la que se desarrollan los programas, dado que pueden llegar a ser extremadamente complejos y debe haber un criterio común en cuanto a la creación, no sólo de funciones, sino de cualquier elemento reutilizable. En ese sentido, se ha adoptado popularmente la **programación orientada a objetos**, que tiene como bloque de construcción a las _clases_, las cuales pueden ser una **abstracción de cualquier entidad** que pueda pensarse (autos, casas, sentimientos). A partir de esas clases, se pueden generar elementos concretos, lo que se denomina una _instancia_ de dicha clase (un auto, una casa, un sentimiento en particular). Las instancias tendrán asociados un conjunto de _atributos_ (el color de un auto, la altura de una casa, el fervor de un sentimiento) y operaciones, denominadas _métodos_ (conducir el auto, pintar la casa, hacer reir), con los cuales podrá relacionarse al resto de los elementos y al entorno de programación mismo.

